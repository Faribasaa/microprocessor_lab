;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :  task5-question3
;Version :
;Date    : 1/8/2021
;Author  :  Fariba Saadati
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;int count=0;
;int direction=0; //0:clockwise 1:anticlockwise
;int speed=1; //0:decrease 1:increase
;int period = 1;    //controlling speed    rpm=120,step=200,  -> frequency for max speed= (step*rpm) /4*60  ->time for on ...
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 // Reinitialize Timer 0 value
; 0000 0022 TCNT0=0x38;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0023 // Place your code here
; 0000 0024 count++;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0025  if (count==100){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0026     while (PINC.2 == 0 ){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0027 
; 0000 0028      if(direction == 0){              //clockwise rotation
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029         if(speed == 1){                           //increase speed
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A        for(period=1;period++;period<26){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002B         //step1
; 0000 002C         PORTA=0x09;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002D         delay_ms(period);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002E 
; 0000 002F         //step2
; 0000 0030         PORTA=0x0a;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0031         delay_ms(period);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0032 
; 0000 0033         //step3
; 0000 0034         PORTA=0x06;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0035         delay_ms(period);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0036 
; 0000 0037         //step4
; 0000 0038         PORTA=0x05;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0039         delay_ms(period);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003A        }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003B         speed = 0;       //change to decrease
;PCODE: $00000042 VOL: 0
; 0000 003C      }
; 0000 003D 
; 0000 003E 
; 0000 003F 
; 0000 0040       if( speed == 0){                            //decrease speed
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0041        for (period =25;period--;period>0){
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0042          //step1
; 0000 0043          PORTA=0x09;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0044          delay_ms(period);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0045 
; 0000 0046          //step2
; 0000 0047          PORTA=0x0a;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0048          delay_ms(period);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0049 
; 0000 004A          //step3
; 0000 004B          PORTA=0x06;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004C          delay_ms(period);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004D 
; 0000 004E          //step4
; 0000 004F          PORTA=0x05;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0050          delay_ms(period);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0051 
; 0000 0052      }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0053          speed = 1;    //change to increase
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0054      }
; 0000 0055          direction = 1;         //change direction
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0056      }
; 0000 0057 
; 0000 0058      if(direction == 1){    //anticlockwise rotetion
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0059      if(speed == 1){                          //increase speed
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 005A        for(period=1;period++;period<26){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005B         //step1
; 0000 005C         PORTA=0x05;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005D         delay_ms(period);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 005E 
; 0000 005F         //step2
; 0000 0060         PORTA=0x06;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0061         delay_ms(period);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0062 
; 0000 0063         //step3
; 0000 0064         PORTA=0x0a;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0065         delay_ms(period);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0066 
; 0000 0067         //step4
; 0000 0068         PORTA=0x09;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0069         delay_ms(period);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 006A        }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 006B         speed = 0;        //change to decrease
;PCODE: $00000096 VOL: 0
; 0000 006C      }
; 0000 006D 
; 0000 006E 
; 0000 006F 
; 0000 0070       if( speed == 0){       //decrease
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0071           for (period =25;period--;period>0){
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0072          //step1
; 0000 0073          PORTA=0x05;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0074          delay_ms(period);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0075 
; 0000 0076          //step2
; 0000 0077          PORTA=0x06;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0078          delay_ms(period);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0079 
; 0000 007A          //step3
; 0000 007B          PORTA=0x0a;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 007C          delay_ms(period);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 007D 
; 0000 007E          //step4
; 0000 007F          PORTA=0x09;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0080          delay_ms(period);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0081 
; 0000 0082      }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0083          speed = 1;         //change to increase
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0084      }
; 0000 0085         direction = 0;    //change direction
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0086      }
; 0000 0087 
; 0000 0088    }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0089 
; 0000 008A 
; 0000 008B    if (PINC.2 == 1){       //stop motor
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 008C         PORTA=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 008D 
; 0000 008E     }
; 0000 008F 
; 0000 0090 
; 0000 0091    count=0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0092   }
; 0000 0093 
; 0000 0094   TCNT0= 0x38;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0095 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;
;
;void main(void)
; 0000 0099 {
;PCODE: $000000D0 VOL: 0
; 0000 009A 
; 0000 009B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 009C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 009D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 009F 
; 0000 00A0 // Timer/Counter 0 initialization
; 0000 00A1 // Clock source: System Clock
; 0000 00A2 // Clock value: 4000.000 kHz
; 0000 00A3 // Mode: Normal top=0xFF
; 0000 00A4 // OC0 output: Disconnected
; 0000 00A5 // Timer Period: 0.05 ms
; 0000 00A6 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00A7 TCNT0=0x38;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00A8 OCR0=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00A9 
; 0000 00AA 
; 0000 00AB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AC TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00AD 
; 0000 00AE ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00AF SFIOR=(0<<ACME);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00B0 
; 0000 00B1 // ADC initialization
; 0000 00B2 // ADC disabled
; 0000 00B3 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00B4 
; 0000 00B5 // SPI initialization
; 0000 00B6 // SPI disabled
; 0000 00B7 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00B8 
; 0000 00B9 // TWI initialization
; 0000 00BA // TWI disabled
; 0000 00BB TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00BC 
; 0000 00BD // Global enable interrupts
; 0000 00BE #asm("sei")
;PCODE: $000000EB VOL: 0
	sei
;PCODE: $000000EC VOL: 0
; 0000 00BF 
; 0000 00C0 while (1)
;PCODE: $000000ED VOL: 0
; 0000 00C1       {
; 0000 00C2       // Place your code here
; 0000 00C3 
; 0000 00C4       }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00C5 }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
