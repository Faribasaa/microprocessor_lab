;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : project2 - counter with 7-segment
;Version : 2
;Date    : 12/20/2020
;Author  : Fariba Saadati
;Company : kharazmi university
;Comments: (showing by overflow timer0)
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define DIG_1   0b11111110
;#define DIG_2   0b11111101
;#define DIG_3   0b11111011
;#define DIG_4   0x11110111
;unsigned char numbers[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};

	.DSEG
;int digits[] = {DIG_1, DIG_2, DIG_3, DIG_4};
;int count = -1;
;int counter,D1,D2,D3,D4;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 // Reinitialize Timer 0 value
; 0000 0029 TCNT0=0x64;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002A counter ++;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002B 
; 0000 002C if (counter ==3){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D 
; 0000 002E     //digit1
; 0000 002F     D1 = count % 10;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030     PORTC = digits[0];
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0031     PORTD = numbers[D1];
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032     delay_ms(75);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0033     PORTC=0xFF;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0034     PORTD=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0035 
; 0000 0036     //digit2
; 0000 0037     D2 = (count%100) / 10;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0038     PORTC = digits[1];
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039     PORTD = numbers[D2];
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003A     delay_ms(75);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003B     PORTC=0xFF;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003C     PORTD=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003D 
; 0000 003E     //digit3
; 0000 003F     D3 = count% 1000;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0040     PORTC = digits[2];
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0041     PORTD = numbers[D3];
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0042     delay_ms(75);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0043     PORTC=0xFF;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0044     PORTD=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0045 
; 0000 0046     //digit4
; 0000 0047     D4 = (count %1000) /100;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0048     PORTC = digits[3];
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0049     PORTD = numbers[D4];
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004A     delay_ms(75);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004B     PORTC=0xFF;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004C     PORTD=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004D 
; 0000 004E 
; 0000 004F      counter=0;
;PCODE: $00000064 VOL: 0
; 0000 0050 
; 0000 0051 	}
; 0000 0052 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0058 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0059 // Reinitialize Timer1 value
; 0000 005A TCNT1H=0xBDC >> 8;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005B TCNT1L=0xBDC & 0xff;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005C 
; 0000 005D       if (count < 10000) {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005E            count++;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005F 		}
; 0000 0060 
; 0000 0061 	  else{
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0062 	        count = 0;
;PCODE: $00000077 VOL: 0
; 0000 0063 	      }
;PCODE: $00000078 VOL: 0
; 0000 0064 
; 0000 0065    }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;
;
;void main(void)
; 0000 006A {
;PCODE: $0000007C VOL: 0
; 0000 006B 
; 0000 006C DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006D 
; 0000 006E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 006F 
; 0000 0070 DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0071 
; 0000 0072 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0073 
; 0000 0074 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0075 TCNT0=0x64;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0076 OCR0=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0077 
; 0000 0078 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0079 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007A TCNT1H=0x0B;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007B TCNT1L=0xDC;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 007C 
; 0000 007D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 007E 
; 0000 007F // Global enable interrupts
; 0000 0080 #asm("sei")
;PCODE: $00000095 VOL: 0
	sei
;PCODE: $00000096 VOL: 0
; 0000 0081 
; 0000 0082 while (1)
;PCODE: $00000097 VOL: 0
; 0000 0083       {
; 0000 0084       // Place your code here
; 0000 0085 
; 0000 0086       }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0087 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
