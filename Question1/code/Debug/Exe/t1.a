;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/19/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;    unsigned char numbers[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};

	.DSEG
;    int count = -1;
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020 // Reinitialize Timer 1 value
; 0000 0021 TCNT1L=0xdb;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0022 TCNT1H=0x0b;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0023 
; 0000 0024       if (count < 10) {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0025            count++;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0026 		}
; 0000 0027 
; 0000 0028 	  else{
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0029 	        count = 0;
;PCODE: $0000001B VOL: 0
; 0000 002A 	      }
;PCODE: $0000001C VOL: 0
; 0000 002B 
; 0000 002C 	  PORTD=numbers[count];
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002D 
; 0000 002E       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;void main(void)
; 0000 0031 {
;PCODE: $00000024 VOL: 0
; 0000 0032 
; 0000 0033 // Port D initialization
; 0000 0034 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0035 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0036 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0037 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0038 
; 0000 0039 
; 0000 003A 
; 0000 003B // Timer/Counter 1 initialization
; 0000 003C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003E TCNT1H=0x0b;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003F TCNT1L=0xdb;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0040 
; 0000 0041 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0042 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0043 
; 0000 0044 // Global enable interrupts
; 0000 0045 #asm("sei")
;PCODE: $00000033 VOL: 0
	sei
;PCODE: $00000034 VOL: 0
; 0000 0046 
; 0000 0047 while (1)
;PCODE: $00000035 VOL: 0
; 0000 0048       {
; 0000 0049       // Place your code here
; 0000 004A 
; 0000 004B       }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004C 
; 0000 004D }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
